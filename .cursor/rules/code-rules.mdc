---
description: When writing typescript code
globs: 
alwaysApply: false
---
Make sure the generated code adheres to the following guidelines:

# String Literals

This project uses single quotes for string literals to maintain consistency across the codebase. Double quotes should only be used when required, such as for JSON properties or when escaping single quotes within a string.

# Fields Declaration Order

Fields must be declared in alphabetical order within interfaces, types, and classes. This convention improves code readability and makes it easier to locate specific fields.

**Don't:**

```typescript
interface Person {
  name: string;
  age: number;
  lastName: string;
  email?: string;
  firstName: string;
}
```

**Instead:**

```typescript
interface Person {
  age: number;
  email?: string;
  firstName: string;
  lastName: string;
  name: string;
}
```

# Constants Over Hard Coded Values

To ensure maintainability and consistency, always use constants instead of hard-coded values in the codebase. This approach improves readability, reduces duplication, and makes it easier to update values when needed.

## Guidelines

1. Define constants in the `src/constants/` directory if they apply globally or inside a folder when constants only apply to specific context (e.g. `users.service.constants.ts` in the same folder as `users.service.ts`).
2. Use descriptive and meaningful names for constants.

**Example:**

```typescript
// filepath: src/constants/app.constants.ts
export const API_BASE_URL = "https://api.example.com";
export const DEFAULT_PAGE_SIZE = 20;
export const SUPPORTED_LANGUAGES = ["en", "es", "fr"];
```

```typescript
// Usage in code
import { API_BASE_URL, DEFAULT_PAGE_SIZE } from "../constants/app.constants";

const fetchUsers = async (page: number) => {
  const response = await fetch(
    `${API_BASE_URL}/users?page=${page}&size=${DEFAULT_PAGE_SIZE}`,
  );
  return response.json();
};
```

# Module Import Order

Maintain a consistent import order within each file:

1. **External Dependencies:**
   - Import all third-party packages first (e.g., `react`, `lodash`, `axios`).
   - Sort these alphabetically. Treat scoped packages or path aliases beginning with `@` (e.g., `@nestjs/common`, `@components`) as preceding other letters.
2. **Internal Project Modules:**
   - Import modules from within this project after external dependencies.
   - Primary sort criterion: Relative path depth. Imports from higher-level directories (e.g., `../../../config`) come before those from closer directories (e.g., `../services`, `./utils`).
   - Secondary sort criterion: Alphabetical order for modules at the same path depth.

**Example:**

```typescript
// External dependencies (alphabetical, @ first)
import { Injectable } from "@nestjs/common";
import axios from "axios";
import * as bcrypt from "bcrypt";

// Internal modules (farthest path first, then alphabetical)
import { AppConfig } from "../../../config";
import { DatabaseService } from "../../database/database.service";
import { User } from "../entities/user.entity";
import { CreateUserDto } from "./dto/create-user.dto";
import { hashPassword } from "./utils/security.utils";
```

# Logging

## Required Fields

Logs should always define a `logId` field with a unique string identifier (unique in an execution) to correlate logs across different executions.

**Example:**

```typescript
/*
lets assume that the values are defined a constant like this:
export const RESOURCE_NOT_FOUND_ERROR = {
    logId: 'resource-not-found',
    logMessage: 'The requested resource was not found',
}
*/
request.log.warn(
  {
    logId: RESOURCE_NOT_FOUND_ERROR.logId,
    requestId: request.id,
    url: request.url,
  },
  RESOURCE_NOT_FOUND_ERROR.logMessage,
);
```

## Monitoring Performance

To effectively monitor performance, wrap asynchronous calls with the `startStep` and `endStep` functions provided by the logger object. These functions generate logs that measure the total time elapsed during execution, making it easier to identify and troubleshoot slow operations.

**Example:**

```typescript
/*
lets assume that the STEPS constant is defined like this:
export const STEPS = {
  UPDATE_USER: { id: 'proxy-request' },
  NOTIFY_USER: { id: 'notify-user' }
};
*/
try {
  logger.startStep(STEPS.UPDATE_USER.id);
  await usersService
    .updateUser()
    .finally(() => logger.endStep(STEPS.UPDATE_USER.id));
  logger.endStep(STEPS.UPDATE_USER.id);
  logger.startStep(STEPS.NOTIFY_USER.id);
  await usersService
    .notifyUser()
    .finally(() => logger.endStep(STEPS.NOTIFY_USER.id));
  // Continue with further logic...
} catch (error) {
  // Handle the error...
}
```

### Best Practices

1. Use meaningful step names to clearly indicate the operation being monitored (e.g., `'update-user'`, `'fetch-data'`).
2. Always ensure `endStep` is called, even in error scenarios, to maintain accurate performance logs.
